# Author: Nuno Aguiar
help:
  text   : Get versions of the imgutils image
  expects: 
  - name     : tag
    desc     : The imgutils tag to use
    example  : latest
    mandatory: true

todo:
- Check versions in imgutils image
- Generate badges
- Generate JSON

ojob:
  opacks      :
  - openaf: 20231222
  - Badgen: 20230603
  catch       : printErrnl("[" + job.name + "] "); if (isDef(exception.javaException)) exception.javaException.printStackTrace(); else printErr(exception)
  logToConsole: true   # to change when finished

include:
- badgen.yaml  

jobs:
# ---------------------------------------
- name : Check versions in imgutils image
  check:
    in:
      tag: isString.default("latest")
  exec : |
    var data = {}

    var oafpath = getOpenAFPath()
    var res = $sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `/openaf/oaf -c 'af.p(getVersion().trim())'`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `sudo docker version -f json | /openaf/oafp path=Client.Version`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `helm version | /openaf/oafp path=Version`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `skopeo -v | /openaf/oafp path="split(@, ' ')[2]"`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `crictl -v | /openaf/oafp path="split(@, ' ')[2]"`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `ctr -v | /openaf/oafp path="replace(split(@, ' ')[2],'v','','')"`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `nerdctl -v | /openaf/oafp path="split(@,' ')[2]"`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `/openaf/oafp cmd="/usr/bin/dive -v" path="split(@,' ').split([1],'-')[0]"`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `TERM=UTF-8 mc -V | /openaf/oafp in=lines linesjoin=true path="split([0], ' ')[3]"`])
              .sh(["docker", "run", "--rm", "nmaguiar/imgutils:" + args.tag, "/bin/sh", "-c", `syft --version | /openaf/oafp path="split(@, ' ')[1]"`])
              .get()

    var _r = {
      openaf : res[0].stdout.trim(),
      docker : res[1].stdout.trim(),
      helm   : res[2].stdout.trim(),
      skopeo : res[3].stdout.trim(),
      crictl : res[4].stdout.trim(),
      ctr    : res[5].stdout.trim(),
      nerdctl: res[6].stdout.trim(),
      dive   : res[7].stdout.trim(),
      mc     : res[8].stdout.trim(),
      syft   : res[9].stdout.trim()
    }

    $set("versions", _r)

# --------------------
- name : Generate JSON
  check:
    in:
      tag     : isString.default("latest")
      jsonfile: isString 
  from :  
  - (get           ): versions
  - (pass          ):
      aJSONFile: "{{jsonfile}}"
      aObj:
        versions:
        - tool   : 'oaf'
          version: "{{openaf}}"
        - tool   : 'docker'
          version: "{{docker}}"
        - tool   : 'helm'
          version: "{{helm}}"
        - tool   : 'skopeo'
          version: "{{skopeo}}"
        - tool   : 'crictl'
          version: "{{crictl}}"
        - tool   : 'ctr'
          version: "{{ctr}}"
        - tool   : 'nerdctl'
          version: "{{nerdctl}}"
        - tool   : 'syft'
          version: "{{syft}}"
      aSpace: ""
    ((templateArgs)): true
  #to   :
  #- (fn    ): io.writeFileJSON
  #  ((key )): args
  exec : |
    io.writeFileJSON(args.aJSONFile, args.aObj, args.aSpace)

# ----------------------
- name : Generate badges
  check:
    in:
      tag: isString.default("latest")
  from :
  - (get): versions
  to   : 
  - (template): " oaf: {{{openaf}}} | docker: {{{docker}}} | helm: {{{helm}}} | skopeo: {{{skopeo}}} | crictl: {{{crictl}}} | ctr: {{{ctr}}} | nerdctl: {{{nerdctl}}} | dive: {{{dive}}} | syft: {{{syft}}} "
    ((outPath): status
    ((key    ): args
    ((out    ): args

  - (log     ): "Generating badge file '{{file}}'..."
  - name      : Badgen generate file
    args      :
      labelColor: grey3
      color     : blue
      icon      : "openaf.svg"

  exec    : |
    args.label = "nmaguiar/imgutils:" + args.tag
