- Target: nmaguiar/imgutils:build (alpine 3.23.0_alpha20250612)
  Class: os-pkgs
  Type: alpine
- Target: Java
  Class: lang-pkgs
  Type: jar
- Target: usr/bin/crictl
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-22874
    PkgID: stdlib@v1.24.1
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.1
      UID: 969259d6a3318a6c
    InstalledVersion: v1.24.1
    FixedVersion: 1.24.4
    Status: fixed
    Layer:
      Digest: sha256:df6dabf390df61d13d7b3b4f96acdb18a79787d48944f6beed7554946ecb12d7
      DiffID: sha256:db7e365213fb83c99119c595fdef3da13ecedec067232531160c43ce688c7c8b
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22874
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'crypto/x509: Usage of ExtKeyUsageAny disables policy validation in crypto/x509'
    Description: Calling Verify with a VerifyOptions.KeyUsages that contains ExtKeyUsageAny unintentionally disabledpolicy validation. This only affected certificate chains which contain policy graphs, which are rather uncommon.
    Severity: HIGH
    VendorSeverity:
      amazon: 2
      bitnami: 3
      cbl-mariner: 3
      redhat: 3
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N
        V3Score: 7.5
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N
        V3Score: 7.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-22874
    - https://go.dev/cl/670375
    - https://go.dev/issue/73612
    - https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22874
    - https://pkg.go.dev/vuln/GO-2025-3749
    - https://www.cve.org/CVERecord?id=CVE-2025-22874
    PublishedDate: '2025-06-11T17:15:42.167Z'
    LastModifiedDate: '2025-06-12T16:06:20.18Z'
  - VulnerabilityID: CVE-2025-0913
    PkgID: stdlib@v1.24.1
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.1
      UID: 969259d6a3318a6c
    InstalledVersion: v1.24.1
    FixedVersion: 1.23.10, 1.24.4
    Status: fixed
    Layer:
      Digest: sha256:df6dabf390df61d13d7b3b4f96acdb18a79787d48944f6beed7554946ecb12d7
      DiffID: sha256:db7e365213fb83c99119c595fdef3da13ecedec067232531160c43ce688c7c8b
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-0913
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: Inconsistent handling of O_CREATE|O_EXCL on Unix and Windows in os in syscall
    Description: os.OpenFile(path, os.O_CREATE|O_EXCL) behaved differently on Unix and Windows systems when the target path was a dangling symlink. On Unix systems, OpenFile with O_CREATE and O_EXCL flags never follows symlinks. On Windows, when the target path was a symlink to a nonexistent location, OpenFile would create a file in that location. OpenFile now always returns an error when the O_CREATE and O_EXCL flags are both set and the target path is a symlink.
    Severity: MEDIUM
    VendorSeverity:
      bitnami: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N
        V3Score: 5.5
    References:
    - https://go.dev/cl/672396
    - https://go.dev/issue/73702
    - https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A
    - https://nvd.nist.gov/vuln/detail/CVE-2025-0913
    - https://pkg.go.dev/vuln/GO-2025-3750
    PublishedDate: '2025-06-11T18:15:24.627Z'
    LastModifiedDate: '2025-06-12T16:06:20.18Z'
  - VulnerabilityID: CVE-2025-22871
    PkgID: stdlib@v1.24.1
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.1
      UID: 969259d6a3318a6c
    InstalledVersion: v1.24.1
    FixedVersion: 1.23.8, 1.24.2
    Status: fixed
    Layer:
      Digest: sha256:df6dabf390df61d13d7b3b4f96acdb18a79787d48944f6beed7554946ecb12d7
      DiffID: sha256:db7e365213fb83c99119c595fdef3da13ecedec067232531160c43ce688c7c8b
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22871
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'net/http: Request smuggling due to acceptance of invalid chunked data in net/http'
    Description: The net/http package improperly accepts a bare LF as a line terminator in chunked data chunk-size lines. This can permit request smuggling if a net/http server is used in conjunction with a server that incorrectly accepts a bare LF as part of a chunk-ext.
    Severity: MEDIUM
    VendorSeverity:
      alma: 2
      amazon: 3
      bitnami: 4
      cbl-mariner: 3
      oracle-oval: 2
      redhat: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N
        V3Score: 9.1
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:N
        V3Score: 5.4
    References:
    - http://www.openwall.com/lists/oss-security/2025/04/04/4
    - https://access.redhat.com/errata/RHSA-2025:9635
    - https://access.redhat.com/security/cve/CVE-2025-22871
    - https://bugzilla.redhat.com/2358493
    - https://errata.almalinux.org/9/ALSA-2025-9635.html
    - https://go.dev/cl/652998
    - https://go.dev/issue/71988
    - https://groups.google.com/g/golang-announce/c/Y2uBTVKjBQk
    - https://linux.oracle.com/cve/CVE-2025-22871.html
    - https://linux.oracle.com/errata/ELSA-2025-9845.html
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22871
    - https://pkg.go.dev/vuln/GO-2025-3563
    - https://www.cve.org/CVERecord?id=CVE-2025-22871
    PublishedDate: '2025-04-08T20:15:20.183Z'
    LastModifiedDate: '2025-04-18T15:15:57.923Z'
  - VulnerabilityID: CVE-2025-4673
    PkgID: stdlib@v1.24.1
    PkgName: stdlib
    PkgIdentifier:
      PURL: pkg:golang/stdlib@v1.24.1
      UID: 969259d6a3318a6c
    InstalledVersion: v1.24.1
    FixedVersion: 1.23.10, 1.24.4
    Status: fixed
    Layer:
      Digest: sha256:df6dabf390df61d13d7b3b4f96acdb18a79787d48944f6beed7554946ecb12d7
      DiffID: sha256:db7e365213fb83c99119c595fdef3da13ecedec067232531160c43ce688c7c8b
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-4673
    DataSource:
      ID: govulndb
      Name: The Go Vulnerability Database
      URL: https://pkg.go.dev/vuln/
    Title: 'net/http: Sensitive headers not cleared on cross-origin redirect in net/http'
    Description: Proxy-Authorization and Proxy-Authenticate headers persisted on cross-origin redirects potentially leaking sensitive information.
    Severity: MEDIUM
    VendorSeverity:
      alma: 2
      amazon: 2
      bitnami: 2
      cbl-mariner: 2
      oracle-oval: 2
      redhat: 2
      ubuntu: 2
    CVSS:
      bitnami:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N
        V3Score: 6.8
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N
        V3Score: 6.8
    References:
    - https://access.redhat.com/errata/RHSA-2025:10676
    - https://access.redhat.com/security/cve/CVE-2025-4673
    - https://bugzilla.redhat.com/2373305
    - https://errata.almalinux.org/9/ALSA-2025-10676.html
    - https://go.dev/cl/679257
    - https://go.dev/issue/73816
    - https://groups.google.com/g/golang-announce/c/ufZ8WpEsA3A
    - https://linux.oracle.com/cve/CVE-2025-4673.html
    - https://linux.oracle.com/errata/ELSA-2025-10677.html
    - https://nvd.nist.gov/vuln/detail/CVE-2025-4673
    - https://pkg.go.dev/vuln/GO-2025-3751
    - https://ubuntu.com/security/notices/USN-7574-1
    - https://www.cve.org/CVERecord?id=CVE-2025-4673
    PublishedDate: '2025-06-11T17:15:42.993Z'
    LastModifiedDate: '2025-06-12T16:06:20.18Z'
- Target: usr/bin/ctr
  Class: lang-pkgs
  Type: gobinary
- Target: usr/bin/dive
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-22870
    PkgID: golang.org/x/net@v0.28.0
    PkgName: golang.org/x/net
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/net@v0.28.0
      UID: 2fe24708cb92b4b0
    InstalledVersion: v0.28.0
    FixedVersion: 0.36.0
    Status: fixed
    Layer:
      Digest: sha256:df6dabf390df61d13d7b3b4f96acdb18a79787d48944f6beed7554946ecb12d7
      DiffID: sha256:db7e365213fb83c99119c595fdef3da13ecedec067232531160c43ce688c7c8b
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22870
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/net/proxy: golang.org/x/net/http/httpproxy: HTTP Proxy bypass using IPv6 Zone IDs in golang.org/x/net'
    Description: Matching of hosts against proxy patterns can improperly treat an IPv6 zone ID as a hostname component. For example, when the NO_PROXY environment variable is set to "*.example.com", a request to "[::1%25.example.com]:80` will incorrectly match and not be proxied.
    Severity: MEDIUM
    CweIDs:
    - CWE-115
    VendorSeverity:
      amazon: 2
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      redhat: 2
      ubuntu: 2
    CVSS:
      ghsa:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:L
        V3Score: 4.4
      redhat:
        V3Vector: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:L
        V3Score: 4.4
    References:
    - http://www.openwall.com/lists/oss-security/2025/03/07/2
    - https://access.redhat.com/security/cve/CVE-2025-22870
    - https://github.com/golang/go/issues/71984
    - https://go-review.googlesource.com/q/project:net
    - https://go.dev/cl/654697
    - https://go.dev/issue/71984
    - https://groups.google.com/g/golang-announce/c/4t3lzH3I0eI/m/b42ImqrBAQAJ
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22870
    - https://pkg.go.dev/vuln/GO-2025-3503
    - https://security.netapp.com/advisory/ntap-20250509-0007
    - https://security.netapp.com/advisory/ntap-20250509-0007/
    - https://ubuntu.com/security/notices/USN-7574-1
    - https://www.cve.org/CVERecord?id=CVE-2025-22870
    PublishedDate: '2025-03-12T19:15:38.31Z'
    LastModifiedDate: '2025-05-09T20:15:38.727Z'
  - VulnerabilityID: CVE-2025-22872
    PkgID: golang.org/x/net@v0.28.0
    PkgName: golang.org/x/net
    PkgIdentifier:
      PURL: pkg:golang/golang.org/x/net@v0.28.0
      UID: 2fe24708cb92b4b0
    InstalledVersion: v0.28.0
    FixedVersion: 0.38.0
    Status: fixed
    Layer:
      Digest: sha256:df6dabf390df61d13d7b3b4f96acdb18a79787d48944f6beed7554946ecb12d7
      DiffID: sha256:db7e365213fb83c99119c595fdef3da13ecedec067232531160c43ce688c7c8b
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-22872
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'golang.org/x/net/html: Incorrect Neutralization of Input During Web Page Generation in x/net in golang.org/x/net'
    Description: The tokenizer incorrectly interprets tags with unquoted attribute values that end with a solidus character (/) as self-closing. When directly using Tokenizer, this can result in such tags incorrectly being marked as self-closing, and when using the Parse functions, this can result in content following such tags as being placed in the wrong scope during DOM construction, but only when tags are in foreign content (e.g. <math>, <svg>, etc contexts).
    Severity: MEDIUM
    VendorSeverity:
      amazon: 3
      azure: 2
      cbl-mariner: 2
      ghsa: 2
      redhat: 2
    CVSS:
      redhat:
        V3Vector: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:C/C:L/I:L/A:L
        V3Score: 6.5
    References:
    - https://access.redhat.com/security/cve/CVE-2025-22872
    - https://github.com/advisories/GHSA-vvgc-356p-c3xw
    - https://go.dev/cl/662715
    - https://go.dev/issue/73070
    - https://groups.google.com/g/golang-announce/c/ezSKR9vqbqA
    - https://nvd.nist.gov/vuln/detail/CVE-2025-22872
    - https://pkg.go.dev/vuln/GO-2025-3595
    - https://security.netapp.com/advisory/ntap-20250516-0007
    - https://security.netapp.com/advisory/ntap-20250516-0007/
    - https://www.cve.org/CVERecord?id=CVE-2025-22872
    PublishedDate: '2025-04-16T18:16:04.183Z'
    LastModifiedDate: '2025-05-16T23:15:19.707Z'
- Target: usr/bin/docker
  Class: lang-pkgs
  Type: gobinary
- Target: usr/bin/helm
  Class: lang-pkgs
  Type: gobinary
- Target: usr/bin/nerdctl
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-54388
    PkgID: github.com/docker/docker@v28.3.1+incompatible
    PkgName: github.com/docker/docker
    PkgIdentifier:
      PURL: pkg:golang/github.com/docker/docker@v28.3.1%2Bincompatible
      UID: f87f4b258c265c38
    InstalledVersion: v28.3.1+incompatible
    FixedVersion: 28.3.3
    Status: fixed
    Layer:
      Digest: sha256:df6dabf390df61d13d7b3b4f96acdb18a79787d48944f6beed7554946ecb12d7
      DiffID: sha256:db7e365213fb83c99119c595fdef3da13ecedec067232531160c43ce688c7c8b
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'Moby firewalld reload makes published container ports accessible from remote hosts '
    Description: |-
      Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (dockerd), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as Docker, or Docker Engine.

      Firewalld is a daemon used by some Linux distributions to provide a dynamically managed firewall. When Firewalld is running, Docker uses its iptables backend to create rules, including rules to isolate containers in one bridge network from containers in other bridge networks.

      ### Impact

      The iptables rules created by Docker are removed when firewalld is reloaded using, for example "firewall-cmd --reload", "killall -HUP firewalld", or "systemctl reload firewalld".

      When that happens, Docker must re-create the rules. However, in affected versions of Docker, the iptables rules that prevent packets arriving on a host interface from reaching container addresses are not re-created.

      Once these rules have been removed, a remote host configured with a route to a Docker bridge network can access published ports, even when those ports were only published to a loopback address. Unpublished ports remain inaccessible.

      For example, following a firewalld reload on a Docker host with address `192.168.0.10` and a bridge network with subnet `172.17.0.0/16`, running the following command on another host in the local network will give it access to published ports on container addresses in that network: `ip route add 172.17.0.0/16 via 192.168.0.10`.

      Containers running in networks created with `--internal` or equivalent have no access to other networks. Containers that are only connected to these networks remain isolated after a firewalld reload.

      Where Docker Engine is not running in the host's network namespace, it is unaffected. Including, for example, Rootless Mode, and Docker Desktop.

      ### Patches

      Moby releases older than 28.2.0 are not affected. A fix is available in moby release 28.3.3.

      ### Workarounds
      After reloading firewalld, either:
      - Restart the docker daemon,
      - Re-create bridge networks, or
      - Use rootless mode.

      ### References
      https://firewalld.org/
      https://firewalld.org/documentation/howto/reload-firewalld.html
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    References:
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
- Target: usr/bin/skopeo
  Class: lang-pkgs
  Type: gobinary
- Target: usr/bin/syft
  Class: lang-pkgs
  Type: gobinary
  Vulnerabilities:
  - VulnerabilityID: CVE-2025-54388
    PkgID: github.com/docker/docker@v28.2.2+incompatible
    PkgName: github.com/docker/docker
    PkgIdentifier:
      PURL: pkg:golang/github.com/docker/docker@v28.2.2%2Bincompatible
      UID: 3c7ce1b3f4e63f81
    InstalledVersion: v28.2.2+incompatible
    FixedVersion: 28.3.3
    Status: fixed
    Layer:
      Digest: sha256:df6dabf390df61d13d7b3b4f96acdb18a79787d48944f6beed7554946ecb12d7
      DiffID: sha256:db7e365213fb83c99119c595fdef3da13ecedec067232531160c43ce688c7c8b
    SeveritySource: ghsa
    PrimaryURL: https://avd.aquasec.com/nvd/cve-2025-54388
    DataSource:
      ID: ghsa
      Name: GitHub Security Advisory Go
      URL: https://github.com/advisories?query=type%3Areviewed+ecosystem%3Ago
    Title: 'Moby firewalld reload makes published container ports accessible from remote hosts '
    Description: |-
      Moby is an open source container framework developed by Docker Inc. that is distributed as Docker Engine, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (dockerd), which is developed as [moby/moby](https://github.com/moby/moby) is commonly referred to as Docker, or Docker Engine.

      Firewalld is a daemon used by some Linux distributions to provide a dynamically managed firewall. When Firewalld is running, Docker uses its iptables backend to create rules, including rules to isolate containers in one bridge network from containers in other bridge networks.

      ### Impact

      The iptables rules created by Docker are removed when firewalld is reloaded using, for example "firewall-cmd --reload", "killall -HUP firewalld", or "systemctl reload firewalld".

      When that happens, Docker must re-create the rules. However, in affected versions of Docker, the iptables rules that prevent packets arriving on a host interface from reaching container addresses are not re-created.

      Once these rules have been removed, a remote host configured with a route to a Docker bridge network can access published ports, even when those ports were only published to a loopback address. Unpublished ports remain inaccessible.

      For example, following a firewalld reload on a Docker host with address `192.168.0.10` and a bridge network with subnet `172.17.0.0/16`, running the following command on another host in the local network will give it access to published ports on container addresses in that network: `ip route add 172.17.0.0/16 via 192.168.0.10`.

      Containers running in networks created with `--internal` or equivalent have no access to other networks. Containers that are only connected to these networks remain isolated after a firewalld reload.

      Where Docker Engine is not running in the host's network namespace, it is unaffected. Including, for example, Rootless Mode, and Docker Desktop.

      ### Patches

      Moby releases older than 28.2.0 are not affected. A fix is available in moby release 28.3.3.

      ### Workarounds
      After reloading firewalld, either:
      - Restart the docker daemon,
      - Re-create bridge networks, or
      - Use rootless mode.

      ### References
      https://firewalld.org/
      https://firewalld.org/documentation/howto/reload-firewalld.html
    Severity: MEDIUM
    VendorSeverity:
      ghsa: 2
    References:
    - https://github.com/moby/moby
    - https://github.com/moby/moby/commit/bea959c7b793b32a893820b97c4eadc7c87fabb0
    - https://github.com/moby/moby/pull/50506
    - https://github.com/moby/moby/security/advisories/GHSA-x4rx-4gw3-53p4
